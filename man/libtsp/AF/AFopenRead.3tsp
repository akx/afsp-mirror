.TH AFopenRead 3tsp "TSP (libtsp/AF)"
.SH Routine
.in +4n
.ti -4n
AFILE *AFopenRead (const char Fname[], long int *Nsamp, long int *Nchan,
float *Sfreq, FILE *fpinfo)
.in -4n
.SH Purpose
.in +4n
.ti -4n
Open an audio file for reading
.in -4n
.SH Description
This routine opens an audio file for reading.  The companion routine
AFreadData reads data from the file.  Routine AFclose should be used to
close the file.
.PP
This routine reads the audio file header and optionally prints the header
information.  Several file header formats are supported.  For files with
no header or an unrecognized header, the file format can be declared by
calling routine AFsetNHpar.  A banner identifying the audio file and its
parameters is printed.
.PP
.in +4n
.ti -4n
AU audio file:
.br
8-bit mu-law, 8-bit A-law, 8-bit integer, 16-bit integer, 24-bit integer,
32-bit integer, 32-bit IEEE floating-point, and 64-bit IEEE floating-point
data formats are supported.
.ti -4n
WAVE file:
.br
8-bit mu-law, 8-bit A-law, offset-binary 1-bit to 8-bit integer, 9-bit to
32-bit integer, 32-bit IEEE floating-point, and 64-bit IEEE floating-point
data formats are supported.
.ti -4n
AIFF or AIFF-C sound file:
.br
8-bit mu-law, 8-bit A-law, 1-bit to 32-bit integer,  32-bit IEEE
floating-point, and 64-bit IEEE floating-point data formats are supported.
.ti -4n
NIST SPHERE audio file:
.br
8-bit mu-law and 16-bit integer data formats are supported.
.ti -4n
IRCAM soundfile:
.br
8-bit mu-law, 8-bit A-law, 8-bit integer, 16-bit integer, 32-bit integer,
and 32-bit floating-point data formats are supported.
.ti -4n
ESPS sampled data feature file:
.br
16-bit integer, 32-bit integer, 32-bit floating-point, and 64-bit
floating-point data formats are supported.
.ti -4n
SPPACK sampled data file:
.br
8-bit mu-law, 8-bit A-law and 16-bit integer data formats are supported.
.ti -4n
INRS-Telecommunications audio file:
.br
16-bit integer format is supported.
.ti -4n
Cadence SPW Signal file:
.br
8-bit integer, 16-bit integer, 32-bit floating-point, 64-point
floating-point, and text formats are supported.
.ti -4n
CSL NSP file:
.br
16-bit integer format is supported.
.ti -4n
Text audio file:
.br
Data in character format (usually representing 16-bit integer values).
.ti -4n
Headerless audio file:
.br
The data format is specified by calling routine AFsetNHpar.
.in -4n
.PP
For the fixed point file data representations, read operations return data
values as follows. The scaling factor shown below is applied to the data in
the file before it is returned.
.ft CW
.nf
.ne 3
   format            returned values
  8-bit mu-law   - [ -32124, +32124 ]  scaling factor 1
  8-bit A-law    - [ -32256, +32256 ]  scaling factor 1
  8-bit integer  - [ -16384, +16256 ]  scaling factor 128
  16-bit integer - [ -32768, +32767 ]  scaling factor 1
  24-bit integer - [ -32768, +32768 )  scaling factor 1/256
  32-bit integer - [ -32768, +32768 )  scaling factor 1/65536
.fi
.ft P
Floating-point data in the input audio file are scaled by 32768 (except for
ESPS sample data feature files).  For file float data values between -1 and
+1, the returned values will be in the range [ -32768, +32768 ].
.PP
.in +4n
.ti -4n
File type determination:
.br
The default behaviour is to determine the file type from the header of the
input file.  However this requires look-ahead and is not possible with
files that are not random access (for instance a file stream from a pipe).
For both random access and sequential access files, the file type can be
specified explicitly with a call to routine AFsetFileType, obviating the
need to determine the file type from the header.
.in -4n
.PP
.in +4n
.ti -4n
Number of samples:
.br
In some types of audio file types, the number of samples is specified in
the file header.  In others, the number of samples is known only if the
file size can be determined, specifically if the file random access.  For
input from a stream which does not allow random access (for instance a file
stream from a pipe), the file size cannot be determined for those files
without that information in the file header.
.ft CW
.nf
.ne 3
                  no. samples
 file type         in header
 AU                  yes
 WAVE                yes
 AIFF or AIFF-C      yes
 NIST SPHERE         yes
 IRCAM               no
 ESPS                yes
 SPPACK              yes
 INRS-Telecom        no
 Cadence SPW         no
 CSL NSP             yes
 Text file           no
 Headerless          no
.fi
.ft P
.ti -4n
Notes:
.ti -4n
- Some AU audio files and some ESPS audio files do not specify the number of
samples.
.ti -4n
- AIFF/AIFF-C files with a perverse header cannot be opened for non-random
access.
.in -4n
.PP
On encountering an error, the default behaviour is to print an error message
and halt execution.
.SH Parameters
.in +4n
.ti -4n
<-  AFILE *AFopenRead
.br
Audio file pointer for the audio file..  The file name "-" means
standard input.
.ti -4n
 -> const char Fname[]
.br
Character string specifying the file name
.ti -4n
<-  long int *Nsamp
.br
Total number of samples in the file (all channels)
.ti -4n
<-  long int *Nchan
.br
Number of channels
.ti -4n
<-  float *Sfreq
.br
Sampling frequency
.ti -4n
 -> FILE *fpinfo
.br
File pointer for printing audio file information.  If fpinfo is not NULL,
information about the audio file is printed on the stream selected by
fpinfo.
.in -4n
.SH Author / revision
P. Kabal
/ Revision 1.86  2003/04/29
.SH See Also
AFreadData,
AFsetNHpar,
AFclose
